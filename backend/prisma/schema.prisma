generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model addresses {
  id         Int       @id @default(autoincrement())
  name       String
  address    String
  postalCode String
  isPrimary  Boolean   @default(false)
  userId     Int
  isDeleted  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  phone      String?   @db.VarChar(30)
  provinceId Int
  cityId     Int
  districtId Int
  users      users     @relation(fields: [userId], references: [id])
  cities     cities    @relation(fields: [cityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_city")
  districts  districts @relation(fields: [districtId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_district")
  provinces  provinces @relation(fields: [provinceId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_province")
  orders     orders[]
}

model branchs {
  id                                               Int                 @id @default(autoincrement())
  name                                             String
  provinceId                                       Int
  cityId                                           Int
  postalCode                                       String
  userId                                           Int?                @unique
  createdAt                                        DateTime            @default(now())
  updatedAt                                        DateTime
  districtId                                       Int?
  phone                                            String?             @db.VarChar(30)
  address                                          String?             @db.VarChar(100)
  latitude                                         Decimal             @db.Decimal(9, 6)
  longitude                                        Decimal             @db.Decimal(9, 6)
  Discount                                         Discount[]
  cities                                           cities              @relation(fields: [cityId], references: [id])
  provinces                                        provinces           @relation(fields: [provinceId], references: [id])
  users                                            users?              @relation(fields: [userId], references: [id])
  districts                                        districts?          @relation(fields: [districtId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_district")
  journal_mutations                                journal_mutations[]
  mutations_mutations_destinationBranchIdTobranchs mutations[]         @relation("mutations_destinationBranchIdTobranchs")
  mutations_mutations_sourceBranchIdTobranchs      mutations[]         @relation("mutations_sourceBranchIdTobranchs")
  orders                                           orders[]
  product_branchs                                  product_branchs[]
}

model carts {
  id            Int             @id @default(autoincrement())
  isActive      Boolean         @default(true)
  userId        Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  users         users           @relation(fields: [userId], references: [id])
  product_carts product_carts[]
}

model categories {
  id        Int        @id @default(autoincrement())
  slug      String     @unique
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime
  image     String?    @db.VarChar(50)
  products  products[]
}

model cities {
  id         Int         @id
  name       String
  provinceId Int
  addresses  addresses[]
  branchs    branchs[]
  provinces  provinces   @relation(fields: [provinceId], references: [id])
  districts  districts[]
}

model journal_mutations {
  id              Int             @id @default(autoincrement())
  quantity        Int
  transactionType TransactionType
  description     String
  productBranchId Int
  branchId        Int?
  mutationId      Int?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  branchs         branchs?        @relation(fields: [branchId], references: [id])
  mutations       mutations?      @relation(fields: [mutationId], references: [id])
  product_branchs product_branchs @relation(fields: [productBranchId], references: [id])
}

model mutations {
  id                                             Int                 @id @default(autoincrement())
  stockRequest                                   Int
  stockProcess                                   Int?
  note                                           String?
  sourceBranchId                                 Int
  destinationBranchId                            Int
  productId                                      Int
  status                                         MutationStatus
  createdAt                                      DateTime            @default(now())
  updatedAt                                      DateTime
  journal_mutations                              journal_mutations[]
  branchs_mutations_destinationBranchIdTobranchs branchs             @relation("mutations_destinationBranchIdTobranchs", fields: [destinationBranchId], references: [id])
  products                                       products            @relation(fields: [productId], references: [id])
  branchs_mutations_sourceBranchIdTobranchs      branchs             @relation("mutations_sourceBranchIdTobranchs", fields: [sourceBranchId], references: [id])
}

model order_products {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Float
  total     Float
  orderId   Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime
  orders    orders   @relation(fields: [orderId], references: [id])
  products  products @relation(fields: [productId], references: [id])
}

model orders {
  id                 Int                 @id @default(autoincrement())
  name               String
  paymentStatus      PaymentStatus
  shippingCost       Float
  total              Float
  paymentMethod      String
  paymentProof       String?
  expirePayment      DateTime
  branchId           Int
  userId             Int
  addressId          Int
  courier            String?
  shippedAt          DateTime?
  cancellationSource CancellationSource?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime
  order_products     order_products[]
  addresses          addresses           @relation(fields: [addressId], references: [id])
  branchs            branchs             @relation(fields: [branchId], references: [id])
  users              users               @relation(fields: [userId], references: [id])
}

model product_branchs {
  id                Int                 @id @default(autoincrement())
  stock             Int
  productId         Int
  branchId          Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  deleted           Boolean             @default(false)
  journal_mutations journal_mutations[]
  branchs           branchs             @relation(fields: [branchId], references: [id])
  products          products            @relation(fields: [productId], references: [id])

  @@unique([productId, branchId])
}

model product_carts {
  id              Int      @id @default(autoincrement())
  quantity        Int
  cartId          Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  productBranchId Int
  carts           carts    @relation(fields: [cartId], references: [id])
}

model products {
  id              Int               @id @default(autoincrement())
  slug            String            @unique
  name            String            @unique
  description     String?
  price           Float
  image           String?           @default("/product.jpg")
  currentStock    Int?
  categoryId      Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  Discount        Discount[]
  mutations       mutations[]
  order_products  order_products[]
  product_branchs product_branchs[]
  categories      categories        @relation(fields: [categoryId], references: [id])
  wishlists       wishlists[]
}

model provinces {
  id        Int         @id
  name      String
  addresses addresses[]
  branchs   branchs[]
  cities    cities[]
}

model samples {
  id   Int    @id @default(autoincrement())
  name String
  code String
}

model users {
  id         Int         @id @default(autoincrement())
  username   String?     @unique
  email      String      @unique
  password   String?
  isVerified Boolean     @default(false)
  role       Role        @default(USER)
  image      String?     @default("/profile.jpg")
  provider   String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime
  addresses  addresses[]
  branchs    branchs?
  carts      carts[]
  orders     orders[]
  wishlists  wishlists[]
}

model wishlists {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime
  products  products @relation(fields: [productId], references: [id])
  users     users    @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

model Discount {
  id           Int          @id @default(autoincrement())
  type         DiscountType
  value        Float
  isPercentage Boolean      @default(true)
  minPurchase  Float?
  buyX         Int?
  getY         Int?
  productId    Int?
  branchId     Int
  expiredAt    DateTime
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  branchs      branchs      @relation(fields: [branchId], references: [id])
  products     products?    @relation(fields: [productId], references: [id])
}

model districts {
  id        Int         @id @default(autoincrement())
  name      String      @unique @db.VarChar(50)
  cityId    Int
  addresses addresses[]
  branchs   branchs[]
  cities    cities      @relation(fields: [cityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_city")
}

enum CancellationSource {
  USER
  SYSTEM
}

enum MutationStatus {
  PENDING
  CANCELED
  APPROVED
  REJECTED
}

enum PaymentStatus {
  UNPAID
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

enum Role {
  SUPER_ADMIN
  STORE_ADMIN
  USER
}

enum TransactionType {
  IN
  OUT
}

enum DiscountType {
  PERCENTAGE
  NOMINAL
  BUY1GET1
}
